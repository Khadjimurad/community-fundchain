#!/usr/bin/env python3
"""
Seed Demo Data for 10 Participants Testing
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Å 10 —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
"""

import asyncio
import os
import sys
from datetime import datetime, timedelta
from decimal import Decimal
import random
import logging

# Add the app directory to the path for imports
sys.path.append('/app')

from app.database import get_db_manager
from app.models import Project, Donation, Allocation, Member, VotingRound, Vote, Payout

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class TenParticipantSeeder:
    """Seeder specifically designed for 10-participant testing scenarios."""
    
    def __init__(self):
        self.db_manager = None
        self.participants = []
        self.projects = []
        self.total_donated = Decimal('0')
        self.total_allocated = Decimal('0')
        
    async def initialize(self):
        """Initialize database connection."""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        self.db_manager = get_db_manager()
        await self.db_manager.reset_database()
        await self.db_manager.create_tables()
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def create_participants(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏."""
        logger.info("üë• –°–æ–∑–¥–∞–Ω–∏–µ 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        # –ü—Ä–æ—Ñ–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
        participant_profiles = [
            {
                'name': '–ê–ª–µ–∫—Å–µ–π –í–æ–ª–∫–æ–≤',
                'role': '–ö—Ä—É–ø–Ω—ã–π –¥–æ–Ω–æ—Ä',
                'weight': 20,
                'donation_capacity': Decimal('15.0'),
                'activity_level': 'high'
            },
            {
                'name': '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
                'role': '–õ–∏–¥–µ—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞', 
                'weight': 15,
                'donation_capacity': Decimal('8.0'),
                'activity_level': 'high'
            },
            {
                'name': '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
                'role': '–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
                'weight': 12,
                'donation_capacity': Decimal('5.0'),
                'activity_level': 'high'
            },
            {
                'name': '–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
                'role': '–û–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
                'weight': 8,
                'donation_capacity': Decimal('3.0'),
                'activity_level': 'medium'
            },
            {
                'name': '–ê–Ω–¥—Ä–µ–π –ú–æ—Ä–æ–∑–æ–≤',
                'role': '–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤',
                'weight': 10,
                'donation_capacity': Decimal('4.0'),
                'activity_level': 'medium'
            },
            {
                'name': '–û–ª—å–≥–∞ –ë–µ–ª–æ–≤–∞',
                'role': '–ß–∞—Å—Ç—ã–π –¥–æ–Ω–æ—Ä',
                'weight': 7,
                'donation_capacity': Decimal('6.0'),
                'activity_level': 'medium'
            },
            {
                'name': '–ü–∞–≤–µ–ª –ù–æ–≤–∏–∫–æ–≤',
                'role': '–°–ª—É—á–∞–π–Ω—ã–π –¥–æ–Ω–æ—Ä',
                'weight': 5,
                'donation_capacity': Decimal('2.0'),
                'activity_level': 'low'
            },
            {
                'name': '–¢–∞—Ç—å—è–Ω–∞ –û—Ä–ª–æ–≤–∞',
                'role': '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
                'weight': 3,
                'donation_capacity': Decimal('1.5'),
                'activity_level': 'low'
            },
            {
                'name': '–°–µ—Ä–≥–µ–π –õ–µ–±–µ–¥–µ–≤',
                'role': '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
                'weight': 18,
                'donation_capacity': Decimal('12.0'),
                'activity_level': 'high'
            },
            {
                'name': '–ù–∞—Ç–∞–ª—å—è –°–æ–∫–æ–ª–æ–≤–∞',
                'role': '–í–æ–ª–æ–Ω—Ç–µ—Ä',
                'weight': 6,
                'donation_capacity': Decimal('2.5'),
                'activity_level': 'medium'
            }
        ]
        
        async with self.db_manager.get_session() as session:
            for i, profile in enumerate(participant_profiles):
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
                address = f"0x{i+1:02d}{'a' * 36}{i+1:02d}"
                
                participant = {
                    'id': f'participant_{i+1:02d}',
                    'address': address,
                    'name': profile['name'],
                    'role': profile['role'],
                    'weight': profile['weight'],
                    'donation_capacity': profile['donation_capacity'],
                    'activity_level': profile['activity_level'],
                    'joined_days_ago': random.randint(1, 365)
                }
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                member = Member(
                    address=address,
                    weight=profile['weight'],
                    member_since=datetime.now() - timedelta(days=participant['joined_days_ago'])
                )
                
                session.add(member)
                self.participants.append(participant)
            
            await session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    async def create_diverse_projects(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤...")
        
        project_templates = [
            {
                'name': '–¶–µ–Ω—Ç—Ä –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
                'description': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º –∏ –æ–ø—ã—Ç–Ω—ã–º –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –º–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.',
                'category': '–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ',
                'target': 25.0,
                'soft_cap': 15.0,
                'hard_cap': 35.0,
                'priority': 1
            },
            {
                'name': '–¶–∏—Ñ—Ä–æ–≤–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞',
                'description': '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞–º–∏, –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –∏ —Ü–∏—Ñ—Ä–æ–≤—ã–º–∏ –æ–±—É—á–∞—é—â–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏.',
                'category': '–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
                'target': 18.0,
                'soft_cap': 12.0,
                'hard_cap': 25.0,
                'priority': 2
            },
            {
                'name': '–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞',
                'description': '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —á–∏—Å—Ç–æ–π, —É—Å—Ç–æ–π—á–∏–≤–æ–π —ç–Ω–µ—Ä–≥–∏–∏.',
                'category': '–≠–∫–æ–ª–æ–≥–∏—è',
                'target': 30.0,
                'soft_cap': 20.0,
                'hard_cap': 40.0,
                'priority': 3
            },
            {
                'name': '–ü—Ä–∏—é—Ç –¥–ª—è –±–µ–∑–¥–æ–º–Ω—ã—Ö',
                'description': '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —É–±–µ–∂–∏—â–µ —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ —Ä–µ–∞–±–∏–ª–∏—Ç–∞—Ü–∏–∏.',
                'category': '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ',
                'target': 22.0,
                'soft_cap': 15.0,
                'hard_cap': 30.0,
                'priority': 4
            },
            {
                'name': '–ú–æ–ª–æ–¥–µ–∂–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∏—Å–∫—É—Å—Å—Ç–≤',
                'description': '–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –º–æ–ª–æ–¥–µ–∂–∏ —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π.',
                'category': '–ö—É–ª—å—Ç—É—Ä–∞',
                'target': 16.0,
                'soft_cap': 10.0,
                'hard_cap': 22.0,
                'priority': 5
            },
            {
                'name': '–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è',
                'description': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–µ—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏ –∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞.',
                'category': '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
                'target': 28.0,
                'soft_cap': 18.0,
                'hard_cap': 35.0,
                'priority': 6
            }
        ]
        
        async with self.db_manager.get_session() as session:
            for i, template in enumerate(project_templates):
                project_id = f"tp_{i+1:02d}"
                
                project = Project(
                    id=project_id,
                    name=template['name'],
                    description=template['description'],
                    category=template['category'],
                    target=template['target'],
                    soft_cap=template['soft_cap'],
                    hard_cap=template['hard_cap'],
                    total_allocated=0.0,
                    status='active',
                    priority=template['priority'],
                    soft_cap_enabled=True,
                    created_at=datetime.now() - timedelta(days=random.randint(5, 45))
                )
                
                session.add(project)
                self.projects.append(project)
            
            await session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(self.projects)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    async def create_realistic_donations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –æ—Ç 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
        logger.info("üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        async with self.db_manager.get_session() as session:
            donation_count = 0
            
            for participant in self.participants:
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if participant['activity_level'] == 'high':
                    num_donations = random.randint(3, 5)
                    activity_label = '–í—ã—Å–æ–∫–∞—è'
                elif participant['activity_level'] == 'medium':
                    num_donations = random.randint(1, 3)
                    activity_label = '–°—Ä–µ–¥–Ω—è—è'
                else:  # low
                    num_donations = random.randint(0, 2)
                    activity_label = '–ù–∏–∑–∫–∞—è'
                
                total_participant_donated = Decimal('0')
                
                for j in range(num_donations):
                    # –†–∞–∑–º–µ—Ä –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è
                    max_donation = participant['donation_capacity'] / Decimal(str(max(1, num_donations)))
                    amount = max_donation * Decimal(str(random.uniform(0.3, 1.0)))
                    
                    donation = Donation(
                        receipt_id=f"receipt_{participant['id']}_{j}_{random.randint(10000, 99999)}",
                        donor_address=participant['address'],
                        amount=float(amount),
                        tx_hash=f"0xtest_{participant['id']}_{j}_{random.randint(10000, 99999)}",
                        block_number=1000000 + donation_count,
                        timestamp=datetime.now() - timedelta(days=random.randint(5, 45))
                    )
                    
                    session.add(donation)
                    total_participant_donated += amount
                    self.total_donated += amount
                    donation_count += 1
                
                logger.info(f"üíù {participant['name']}: {num_donations} –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –Ω–∞ —Å—É–º–º—É {total_participant_donated:.2f} ETH")
            
            await session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {donation_count} –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É {self.total_donated:.2f} ETH")
    
    async def create_strategic_allocations(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º."""
        logger.info("üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º...")
        
        async with self.db_manager.get_session() as session:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π
            from sqlalchemy import text
            result = await session.execute(text("SELECT id, amount, donor_address FROM donations"))
            donations = result.fetchall()
            
            allocation_count = 0
            project_allocations = {project.id: Decimal('0') for project in self.projects}
            
            for donation in donations:
                donation_id, amount, donor_address = donation
                amount = Decimal(str(amount))
                
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                participant = next((p for p in self.participants if p['address'] == donor_address), None)
                
                if participant:
                    if participant['role'] in ['major_donor', 'community_leader']:
                        # –ö—Ä—É–ø–Ω—ã–µ –¥–æ–Ω–æ—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—é—Ç –ø–æ 2-3 –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–∞–º
                        selected_projects = self.projects[:3]
                        weights = [0.5, 0.3, 0.2]
                    elif participant['role'] in ['active_voter', 'project_creator']:
                        # –ê–∫—Ç–∏–≤–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç 2-4 –ø—Ä–æ–µ–∫—Ç–∞
                        selected_projects = random.sample(self.projects, min(4, len(self.projects)))
                        weights = [random.uniform(0.2, 0.6) for _ in selected_projects]
                        weights = [w / sum(weights) for w in weights]  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                    else:
                        # –û–±—ã—á–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞ 1-2 –ø—Ä–æ–µ–∫—Ç–∞—Ö
                        selected_projects = random.sample(self.projects, min(2, len(self.projects)))
                        weights = [random.uniform(0.4, 0.8), random.uniform(0.2, 0.6)]
                        weights = weights[:len(selected_projects)]
                        weights = [w / sum(weights) for w in weights]  # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π
                for project, weight in zip(selected_projects, weights):
                    allocation_amount = amount * Decimal(str(weight))
                    
                    allocation = Allocation(
                        donation_id=donation_id,
                        project_id=project.id,
                        donor_address=donor_address,
                        amount=float(allocation_amount),
                        tx_hash=f"0xalloc_{donation_id}_{project.id}_{random.randint(10000, 99999)}",
                        block_number=1000000 + donation_id,
                        timestamp=datetime.now() - timedelta(days=random.randint(5, 45))
                    )
                    
                    session.add(allocation)
                    project_allocations[project.id] += allocation_amount
                    self.total_allocated += allocation_amount
                    allocation_count += 1
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö —Å—É–º–º –ø—Ä–æ–µ–∫—Ç–æ–≤
            for project in self.projects:
                project.total_allocated = float(project_allocations[project.id])
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞
                if project.total_allocated >= project.target:
                    project.status = 'funded'
                elif project.total_allocated >= project.soft_cap:
                    project.status = 'active'
                elif project.total_allocated > 0:
                    project.status = 'active'
                else:
                    project.status = 'pending'
            
            await session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {allocation_count} —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π")
            
            # –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
            logger.info("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–æ–≤:")
            for project in self.projects:
                funding_percentage = (project.total_allocated / project.target) * 100
                logger.info(f"   {project.name}: {project.total_allocated:.2f}/{project.target:.2f} ETH ({funding_percentage:.1f}%) - {project.status}")
    
    async def create_voting_scenario(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger.info("üó≥Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...")
        
        async with self.db_manager.get_session() as session:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            voting_round = VotingRound(
                round_id=1,
                start_commit=datetime.now(),
                end_commit=datetime.now() + timedelta(days=7),
                end_reveal=datetime.now() + timedelta(days=10),
                finalized=False,
                snapshot_block=1500000
            )
            
            session.add(voting_round)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            commit_count = 0
            reveal_count = 0
            
            for participant in self.participants:
                # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
                if participant['activity_level'] == 'high':
                    participation_chance = 0.9
                    activity_label = '–í—ã—Å–æ–∫–∞—è'
                elif participant['activity_level'] == 'medium':
                    participation_chance = 0.7
                    activity_label = '–°—Ä–µ–¥–Ω—è—è'
                else:
                    participation_chance = 0.4
                    activity_label = '–ù–∏–∑–∫–∞—è'
                
                if random.random() < participation_chance:
                    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
                    commit_vote = Vote(
                        round_id=1,
                        voter_address=participant['address'],
                        project_id="0000000000000000000000000000000000000000000000000000000000000000",
                        choice="not_participating",
                        tx_hash=f"0x{random.randint(1000000, 9999999):08x}",
                        block_number=2000000 + commit_count,
                        committed_at=datetime.now() - timedelta(days=random.randint(5, 45))
                    )
                    
                    session.add(commit_vote)
                    commit_count += 1
                    
                    # 85% –∫–æ–º–º–∏—Ç–æ–≤ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç—Å—è
                    if random.random() < 0.85:
                        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≥–æ–ª–æ—Å–∞
                        selected_project = random.choice(self.projects)
                        choice = random.choice(['for', 'against', 'abstain'])
                        
                        reveal_vote = Vote(
                            round_id=1,
                            voter_address=participant['address'],
                            project_id=selected_project.id,
                            choice=choice,
                            weight=participant['weight'],
                            tx_hash=f"0x{random.randint(1000000, 9999999):08x}",
                            block_number=2000000 + reveal_count,
                            revealed_at=datetime.now() - timedelta(days=random.randint(5, 45))
                        )
                        
                        session.add(reveal_vote)
                        reveal_count += 1
            
            await session.commit()
            
            logger.info(f"‚úÖ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: {commit_count} –∫–æ–º–º–∏—Ç–æ–≤, {reveal_count} —Ä–∞—Å–∫—Ä—ã—Ç–∏–π")
            logger.info(f"   –£—á–∞—Å—Ç–∏–µ –≤ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏: {commit_count}/10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({commit_count * 10}%)")
            logger.info(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∏–π: {reveal_count}/{commit_count} ({reveal_count / max(1, commit_count) * 100:.1f}%)")
    
    async def create_payout_records(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –≤—ã–ø–ª–∞—Ç–∞—Ö –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."""
        logger.info("üí∏ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –≤—ã–ø–ª–∞—Ç–∞—Ö...")
        
        async with self.db_manager.get_session() as session:
            payout_count = 0
            
            for project in self.projects:
                if project.status == 'funded':
                    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—ç—Ç–∞–ø–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
                    num_payouts = random.randint(2, 4)
                    total_amount = project.total_allocated
                    
                    for i in range(num_payouts):
                        if i == num_payouts - 1:
                            # –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–ø–ª–∞—Ç–∞ - –æ—Å—Ç–∞—Ç–æ–∫
                            payout_amount = total_amount * 0.3
                        else:
                            payout_amount = total_amount * random.uniform(0.2, 0.4)
                        
                        payout = Payout(
                            project_id=project.id,
                            amount=payout_amount,
                            recipient_address=f"0xrecipient_{project.id}_{i}",
                            tx_hash=f"0xpayout_{project.id}_{i}_{random.randint(10000, 99999)}",
                            timestamp=datetime.now() - timedelta(days=random.randint(5, 45))
                        )
                        
                        session.add(payout)
                        payout_count += 1
            
            await session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {payout_count} –∑–∞–ø–∏—Å–µ–π –æ –≤—ã–ø–ª–∞—Ç–∞—Ö")
    
    async def generate_summary_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        funded_projects = len([p for p in self.projects if p.status == 'funded'])
        active_projects = len([p for p in self.projects if p.status == 'active'])
        pending_projects = len([p for p in self.projects if p.status == 'pending'])
        
        high_activity_participants = len([p for p in self.participants if p['activity_level'] == 'high'])
        medium_activity_participants = len([p for p in self.participants if p['activity_level'] == 'medium'])
        low_activity_participants = len([p for p in self.participants if p['activity_level'] == 'low'])
        
        efficiency_rate = (self.total_allocated / self.total_donated * 100) if self.total_donated > 0 else 0
        
        report = f"""
üéØ –û–¢–ß–ï–¢ –û –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–• –î–õ–Ø 10 –£–ß–ê–°–¢–ù–ò–ö–û–í
===========================================

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(self.participants)}
   –ü—Ä–æ–µ–∫—Ç–æ–≤: {len(self.projects)}
   –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–π: {self.total_donated:.2f} ETH
   –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π: {self.total_allocated:.2f} ETH
   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {efficiency_rate:.1f}%

üë• –£–ß–ê–°–¢–ù–ò–ö–ò –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò:
   –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {high_activity_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {medium_activity_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
   –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {low_activity_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

üìã –ü–†–û–ï–ö–¢–´ –ü–û –°–¢–ê–¢–£–°–£:
   –§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ: {funded_projects} –ø—Ä–æ–µ–∫—Ç–æ–≤
   –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_projects} –ø—Ä–æ–µ–∫—Ç–æ–≤
   –û–∂–∏–¥–∞—é—â–∏–µ: {pending_projects} –ø—Ä–æ–µ–∫—Ç–æ–≤

üí∞ –î–ï–¢–ê–õ–ò –ü–û –£–ß–ê–°–¢–ù–ò–ö–ê–ú:
"""
        
        for participant in self.participants:
            role_labels = {
                'major_donor': '–ö—Ä—É–ø–Ω—ã–π –¥–æ–Ω–æ—Ä',
                'community_leader': '–õ–∏–¥–µ—Ä —Å–æ–æ–±—â–µ—Å—Ç–≤–∞',
                'active_voter': '–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
                'regular_member': '–û–±—ã—á–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
                'project_creator': '–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–æ–µ–∫—Ç–æ–≤',
                'frequent_donor': '–ß–∞—Å—Ç—ã–π –¥–æ–Ω–æ—Ä',
                'occasional_donor': '–°–ª—É—á–∞–π–Ω—ã–π –¥–æ–Ω–æ—Ä',
                'new_member': '–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
                'institutional_rep': '–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏',
                'volunteer': '–í–æ–ª–æ–Ω—Ç–µ—Ä'
            }
            
            role_label = role_labels.get(participant['role'], participant['role'])
            report += f"   {participant['name']} ({role_label}): {participant['weight']} SBT, –¥–æ {participant['donation_capacity']} ETH\n"
        
        report += f"""
üìã –î–ï–¢–ê–õ–ò –ü–û –ü–†–û–ï–ö–¢–ê–ú:
"""
        
        for project in self.projects:
            funding_percentage = (project.total_allocated / project.target) * 100
            status_labels = {
                'funded': '–ü—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω',
                'active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
                'pending': '–í –æ–∂–∏–¥–∞–Ω–∏–∏'
            }
            status_label = status_labels.get(project.status, project.status)
            report += f"   {project.name}: {project.total_allocated:.2f}/{project.target:.2f} ETH ({funding_percentage:.1f}%) - {status_label}\n"
        
        report += f"""
‚úÖ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ:
   ‚úì 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
   ‚úì {len(self.projects)} —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
   ‚úì –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
   ‚úì –°—Ü–µ–Ω–∞—Ä–∏–π –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω
   ‚úì –ó–∞–ø–∏—Å–∏ –æ –≤—ã–ø–ª–∞—Ç–∞—Ö —Å–æ–∑–¥–∞–Ω—ã
   
üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!
"""
        
        logger.info(report)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        report_file = f"test_data_report_10_participants_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {report_file}")
    
    async def seed_all_data(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üå± –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
        
        await self.create_participants()
        await self.create_diverse_projects()
        await self.create_realistic_donations()
        await self.create_strategic_allocations()
        await self.create_voting_scenario()
        await self.create_payout_records()
        await self.generate_summary_report()
        
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    seeder = TenParticipantSeeder()
    
    try:
        await seeder.initialize()
        await seeder.seed_all_data()
        
        print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è 10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        
    except KeyboardInterrupt:
        logger.info("üõë –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return 1
    
    return 0


if __name__ == "__main__":
    import sys
    exit_code = asyncio.run(main())
    sys.exit(exit_code)