#!/bin/bash
# Fresh Start Script for FundChain
# –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ë–ï–ó –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

echo -e "${BLUE}üöÄ FundChain Fresh Start Script (Cleanup Only)${NC}"
echo -e "${BLUE}==============================================${NC}"
echo ""

# Function to show help
show_help() {
    cat << EOF
Fresh Start Script for FundChain (Cleanup Only)

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    $0 [–û–ü–¶–ò–ò]

–û–ü–¶–ò–ò:
    -h, --help          –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
    -f, --force         –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    --no-backup         –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏

–ü–†–ò–ú–ï–†–´:
    $0                  # –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    $0 --force          # –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    $0 --no-backup      # –ë–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏

–û–ü–ò–°–ê–ù–ò–ï:
    –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É —Å–∏—Å—Ç–µ–º—ã FundChain
    –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —á–∏—Å—Ç–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.
    
    –í–∫–ª—é—á–∞–µ—Ç:
    - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    - –û—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    - –û—á–∏—Å—Ç–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ ABI —Ñ–∞–π–ª–æ–≤
    - –û—á–∏—Å—Ç–∫—É –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    - –û—á–∏—Å—Ç–∫—É Anvil –±–ª–æ–∫—á–µ–π–Ω–∞
    
    –ù–ï –≤–∫–ª—é—á–∞–µ—Ç:
    - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤

EOF
}

# Function to log messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if running in project root
check_project_root() {
    if [[ ! -f "docker-compose.yml" ]]; then
        log_error "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞"
        log_error "–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $(pwd)"
        exit 1
    fi
    log_success "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞: OK"
}

# Function to check Docker containers
check_docker_containers() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    if ! docker ps --format "table {{.Names}}\t{{.Status}}" | grep -q "community-fundchain"; then
        log_warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã FundChain –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é:"
        log_warning "docker-compose up -d"
        exit 1
    fi
    
    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã FundChain –∑–∞–ø—É—â–µ–Ω—ã"
}

# Function to create backup
create_backup() {
    if [[ "$SKIP_BACKUP" == "true" ]]; then
        log_warning "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ"
        return
    fi
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
    
    BACKUP_DIR="backups/fresh_start_${TIMESTAMP}"
    mkdir -p "$BACKUP_DIR"
    
    # Backup database
    if [[ -f "backend/fundchain.db" ]]; then
        cp "backend/fundchain.db" "$BACKUP_DIR/"
        log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $BACKUP_DIR/"
    fi
    
    # Backup deployment info
    if [[ -f "deployment_logs/deployment_info.json" ]]; then
        cp "deployment_logs/deployment_info.json" "$BACKUP_DIR/"
        log_success "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–ª–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $BACKUP_DIR/"
    fi
    
    # Backup contract config
    if [[ -f "web/contract-config.js" ]]; then
        cp "web/contract-config.js" "$BACKUP_DIR/"
        log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ $BACKUP_DIR/"
    fi
    
    log_success "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ $BACKUP_DIR/"
}

# Function to cleanup database
cleanup_database() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    
    if [[ -f "backend/fundchain.db" ]]; then
        rm -f "backend/fundchain.db"
        log_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞"
    else
        log_warning "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# Function to cleanup contracts and ABI files
cleanup_contracts() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ ABI —Ñ–∞–π–ª–æ–≤..."
    
    # Clean contracts output
    if [[ -d "contracts/out" ]]; then
        rm -rf "contracts/out"
        log_success "–ü–∞–ø–∫–∞ contracts/out –æ—á–∏—â–µ–Ω–∞"
    fi
    
    # Clean contracts cache
    if [[ -d "contracts/cache" ]]; then
        rm -rf "contracts/cache"
        log_success "–ö—ç—à –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –æ—á–∏—â–µ–Ω"
    fi
    
    # Clean deployment logs
    if [[ -d "deployment_logs" ]]; then
        rm -rf "deployment_logs"
        mkdir -p "deployment_logs"
        log_success "–õ–æ–≥–∏ –¥–µ–ø–ª–æ—è –æ—á–∏—â–µ–Ω—ã"
    fi
    
    # Clean contract config
    if [[ -f "web/contract-config.js" ]]; then
        rm -f "web/contract-config.js"
        log_success "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ —É–¥–∞–ª–µ–Ω–∞"
    fi
}

# Function to cleanup Anvil blockchain
cleanup_anvil() {
    log_info "–û—á–∏—Å—Ç–∫–∞ Anvil –±–ª–æ–∫—á–µ–π–Ω–∞..."
    
    # Check if Anvil container is running
    if docker ps --format "{{.Names}}" | grep -q "community-fundchain-anvil-1"; then
        log_info "–°–±—Ä–æ—Å Anvil –±–ª–æ–∫—á–µ–π–Ω–∞..."
        
        # Reset Anvil to genesis
        if curl -s -X POST -H "Content-Type: application/json" \
            --data '{"jsonrpc":"2.0","method":"anvil_reset","params":[],"id":1}' \
            http://localhost:8545 > /dev/null 2>&1; then
            log_success "Anvil –±–ª–æ–∫—á–µ–π–Ω —Å–±—Ä–æ—à–µ–Ω"
        else
            log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å Anvil –±–ª–æ–∫—á–µ–π–Ω"
        fi
    else
        log_warning "Anvil –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
}

# Function to cleanup test data
cleanup_test_data() {
    log_info "–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö..."
    
    # Clean test logs
    if [[ -d "logs" ]]; then
        rm -rf "logs"
        mkdir -p "logs"
        log_success "–õ–æ–≥–∏ —Ç–µ—Å—Ç–æ–≤ –æ—á–∏—â–µ–Ω—ã"
    fi
    
    # Clean test outputs
    find . -name "*.log" -type f -delete 2>/dev/null || true
    find . -name "test_*.pyc" -type f -delete 2>/dev/null || true
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
    
    log_success "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã"
}

# Function to cleanup backend data
cleanup_backend() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö backend..."
    
    # Clean backend database
    if [[ -f "backend/fundchain.db" ]]; then
        rm -f "backend/fundchain.db"
        log_success "Backend –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞"
    fi
    
    # Clean backend cache
    if [[ -d "backend/__pycache__" ]]; then
        rm -rf "backend/__pycache__"
        log_success "Backend –∫—ç—à –æ—á–∏—â–µ–Ω"
    fi
    
    # Clean backend logs
    if [[ -d "backend/logs" ]]; then
        rm -rf "backend/logs"
        mkdir -p "backend/logs"
        log_success "Backend –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
    fi
}

# Function to cleanup frontend data
cleanup_frontend() {
    log_info "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö frontend..."
    
    # Clean frontend cache
    if [[ -d "web/.cache" ]]; then
        rm -rf "web/.cache"
        log_success "Frontend –∫—ç—à –æ—á–∏—â–µ–Ω"
    fi
    
    # Clean frontend logs
    if [[ -d "web/logs" ]]; then
        rm -rf "web/logs"
        mkdir -p "web/logs"
        log_success "Frontend –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
    fi
}

# Function to show cleanup summary
show_cleanup_summary() {
    echo ""
    echo -e "${GREEN}üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo ""
    echo -e "${BLUE}–ß—Ç–æ –±—ã–ª–æ –æ—á–∏—â–µ–Ω–æ:${NC}"
    echo "  ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
    echo "  ‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ ABI —Ñ–∞–π–ª—ã"
    echo "  ‚úÖ Anvil –±–ª–æ–∫—á–µ–π–Ω"
    echo "  ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
    echo "  ‚úÖ Backend –¥–∞–Ω–Ω—ã–µ"
    echo "  ‚úÖ Frontend –¥–∞–Ω–Ω—ã–µ"
    echo ""
    echo -e "${BLUE}–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:${NC}"
    echo "  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è: ./deploy_contracts_improved.sh"
    echo "  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–∫—Ä–∏–ø—Ç—ã: ./test/run_full_test_cycle.sh"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ù–ï –±—ã–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!${NC}"
    echo "  –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker-compose restart"
}

# Main execution
main() {
    # Parse command line arguments
    SKIP_BACKUP="false"
    FORCE="false"
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -f|--force)
                FORCE="true"
                shift
                ;;
            --no-backup)
                SKIP_BACKUP="true"
                shift
                ;;
            *)
                log_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Check if running in project root
    check_project_root
    
    # Check Docker containers
    check_docker_containers
    
    # Show warning and ask for confirmation
    if [[ "$FORCE" != "true" ]]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ!${NC}"
        echo ""
        echo "–ë—É–¥–µ—Ç –æ—á–∏—â–µ–Ω–æ:"
        echo "  - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
        echo "  - –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏ ABI —Ñ–∞–π–ª—ã"
        echo "  - Anvil –±–ª–æ–∫—á–µ–π–Ω"
        echo "  - –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
        echo "  - Backend –∏ Frontend –¥–∞–Ω–Ω—ã–µ"
        echo ""
        echo -e "${YELLOW}–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ù–ï –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!${NC}"
        echo ""
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            log_info "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
            exit 0
        fi
    fi
    
    # Create backup
    create_backup
    
    # Perform cleanup
    cleanup_database
    cleanup_contracts
    cleanup_anvil
    cleanup_test_data
    cleanup_backend
    cleanup_frontend
    
    # Show summary
    show_cleanup_summary
}

# Run main function
main "$@"
